/**
 * Event decoder functions
 * Auto-generated by generate-decoders.ts
 */

import { Interface } from "@ethersproject/abi";
import ABI from "../abi/AccessContract.json";
import type {
  AccessPurchasedEvent,
  InitializedEvent,
  OwnershipTransferredEvent,
  ResourceCreatedEvent,
  WithdrawalEvent,
  AccessContractEvent
} from "../types/AccessContract";

// Generic log interface
export interface Log {
  topics: string[];
  data: string;
}

// Generic decoder function
export function decodeEvent(log: Log) {
  const iface = new Interface(ABI);
  return iface.parseLog(log);
}

// Specific event decoders
export function decodeAccessPurchased(log: Log): AccessPurchasedEvent {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== 'AccessPurchased') {
      throw new Error(`Expected AccessPurchased event, got ${parsed.name}`);
    }
    
    return {
      name: 'AccessPurchased' as const,
    resourceId: parsed.args[0],
    buyer: parsed.args[1],
    amountPaid: parsed.args[2],
    purchasedAt: parsed.args[3]
    };
  } catch (error: any) {
    throw new Error(`Failed to decode AccessPurchased: ${error.message}`);
  }
}

export function decodeInitialized(log: Log): InitializedEvent {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== 'Initialized') {
      throw new Error(`Expected Initialized event, got ${parsed.name}`);
    }
    
    return {
      name: 'Initialized' as const,
    version: parsed.args[0]
    };
  } catch (error: any) {
    throw new Error(`Failed to decode Initialized: ${error.message}`);
  }
}

export function decodeOwnershipTransferred(log: Log): OwnershipTransferredEvent {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== 'OwnershipTransferred') {
      throw new Error(`Expected OwnershipTransferred event, got ${parsed.name}`);
    }
    
    return {
      name: 'OwnershipTransferred' as const,
    previousOwner: parsed.args[0],
    newOwner: parsed.args[1]
    };
  } catch (error: any) {
    throw new Error(`Failed to decode OwnershipTransferred: ${error.message}`);
  }
}

export function decodeResourceCreated(log: Log): ResourceCreatedEvent {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== 'ResourceCreated') {
      throw new Error(`Expected ResourceCreated event, got ${parsed.name}`);
    }
    
    return {
      name: 'ResourceCreated' as const,
    resourceId: parsed.args[0],
    owner: parsed.args[1],
    resourceName: parsed.args[2],
    description: parsed.args[3],
    cid: parsed.args[4],
    url: parsed.args[5],
    serviceId: parsed.args[6],
    price: parsed.args[7],
    createdAt: parsed.args[8],
    resourceType: parsed.args[9]
    };
  } catch (error: any) {
    throw new Error(`Failed to decode ResourceCreated: ${error.message}`);
  }
}

export function decodeWithdrawal(log: Log): WithdrawalEvent {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== 'Withdrawal') {
      throw new Error(`Expected Withdrawal event, got ${parsed.name}`);
    }
    
    return {
      name: 'Withdrawal' as const,
    seller: parsed.args[0],
    amount: parsed.args[1]
    };
  } catch (error: any) {
    throw new Error(`Failed to decode Withdrawal: ${error.message}`);
  }
}

// Decode any event and return typed result
export function decodeAccessContractEvent(log: Log): AccessContractEvent {
  const iface = new Interface(ABI);
  const parsed = iface.parseLog(log);
  
  switch (parsed.name) {
    case 'AccessPurchased':
      return decodeAccessPurchased(log);
    case 'Initialized':
      return decodeInitialized(log);
    case 'OwnershipTransferred':
      return decodeOwnershipTransferred(log);
    case 'ResourceCreated':
      return decodeResourceCreated(log);
    case 'Withdrawal':
      return decodeWithdrawal(log);
    default:
      throw new Error(`Unknown event: ${parsed.name}`);
  }
}
