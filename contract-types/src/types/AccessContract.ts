/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AccessContract {
  export type ResourceStruct = {
    owner: AddressLike;
    name: string;
    description: string;
    cid: string;
    url: string;
    serviceId: string;
    price: BigNumberish;
    usageDuration: BigNumberish;
    usageLimit: BigNumberish;
    isActive: boolean;
    resourceType: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    deactivatedAt: BigNumberish;
    deletedAt: BigNumberish;
  };

  export type ResourceStructOutput = [
    owner: string,
    name: string,
    description: string,
    cid: string,
    url: string,
    serviceId: string,
    price: bigint,
    usageDuration: bigint,
    usageLimit: bigint,
    isActive: boolean,
    resourceType: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    deactivatedAt: bigint,
    deletedAt: bigint
  ] & {
    owner: string;
    name: string;
    description: string;
    cid: string;
    url: string;
    serviceId: string;
    price: bigint;
    usageDuration: bigint;
    usageLimit: bigint;
    isActive: boolean;
    resourceType: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    deactivatedAt: bigint;
    deletedAt: bigint;
  };
}

export interface AccessContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchExpireAccess"
      | "buyAccess"
      | "buyerAccess"
      | "consumeUsage"
      | "createResource"
      | "deactivateResource"
      | "deleteResource"
      | "editResource"
      | "emergencyDeactivateResource"
      | "expireAccess"
      | "getAllResourceIds"
      | "getAllResources"
      | "getResource"
      | "getResourceTypeString"
      | "getResourcesByType"
      | "getResourcesCreatedBetween"
      | "getUserAccessCount"
      | "getUserAccessHistory"
      | "getUserAccessibleResources"
      | "hasAccess"
      | "initialize"
      | "isResourceDeleted"
      | "migrateUserAccess"
      | "needsExpiration"
      | "nextResourceId"
      | "owner"
      | "renounceOwnership"
      | "resourceExists"
      | "resourceIds"
      | "resources"
      | "sellerBalances"
      | "transferOwnership"
      | "userHasEverPurchased"
      | "userPurchasedResources"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessExpired"
      | "AccessPurchased"
      | "Initialized"
      | "OwnershipTransferred"
      | "ResourceCreated"
      | "ResourceDeactivated"
      | "ResourceDeleted"
      | "ResourceUpdated"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchExpireAccess",
    values: [AddressLike[], BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buyAccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeUsage",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createResource",
    values: [
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editResource",
    values: [
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDeactivateResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expireAccess",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllResourceIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllResources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceTypeString",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourcesByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourcesCreatedBetween",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccessCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccessHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccessibleResources",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAccess",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isResourceDeleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateUserAccess",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "needsExpiration",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextResourceId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resourceIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resources",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellerBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasEverPurchased",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPurchasedResources",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchExpireAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDeactivateResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllResourceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourceTypeString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourcesByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourcesCreatedBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccessCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccessHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccessibleResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasAccess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isResourceDeleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateUserAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "needsExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextResourceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resources", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasEverPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPurchasedResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AccessExpiredEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    user: AddressLike,
    reason: string,
    resourceName: string
  ];
  export type OutputTuple = [
    resourceId: bigint,
    user: string,
    reason: string,
    resourceName: string
  ];
  export interface OutputObject {
    resourceId: bigint;
    user: string;
    reason: string;
    resourceName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AccessPurchasedEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    buyer: AddressLike,
    expiresAt: BigNumberish,
    usageLimit: BigNumberish,
    amountPaid: BigNumberish,
    purchasedAt: BigNumberish,
    lastExtendedAt: BigNumberish
  ];
  export type OutputTuple = [
    resourceId: bigint,
    buyer: string,
    expiresAt: bigint,
    usageLimit: bigint,
    amountPaid: bigint,
    purchasedAt: bigint,
    lastExtendedAt: bigint
  ];
  export interface OutputObject {
    resourceId: bigint;
    buyer: string;
    expiresAt: bigint;
    usageLimit: bigint;
    amountPaid: bigint;
    purchasedAt: bigint;
    lastExtendedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceCreatedEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    owner: AddressLike,
    name: string,
    description: string,
    cid: string,
    url: string,
    serviceId: string,
    price: BigNumberish,
    usageDuration: BigNumberish,
    usageLimit: BigNumberish,
    createdAt: BigNumberish,
    resourceType: BigNumberish
  ];
  export type OutputTuple = [
    resourceId: bigint,
    owner: string,
    name: string,
    description: string,
    cid: string,
    url: string,
    serviceId: string,
    price: bigint,
    usageDuration: bigint,
    usageLimit: bigint,
    createdAt: bigint,
    resourceType: bigint
  ];
  export interface OutputObject {
    resourceId: bigint;
    owner: string;
    name: string;
    description: string;
    cid: string;
    url: string;
    serviceId: string;
    price: bigint;
    usageDuration: bigint;
    usageLimit: bigint;
    createdAt: bigint;
    resourceType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceDeactivatedEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    owner: AddressLike,
    name: string,
    deactivatedAt: BigNumberish
  ];
  export type OutputTuple = [
    resourceId: bigint,
    owner: string,
    name: string,
    deactivatedAt: bigint
  ];
  export interface OutputObject {
    resourceId: bigint;
    owner: string;
    name: string;
    deactivatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceDeletedEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    owner: AddressLike,
    name: string,
    deletedAt: BigNumberish
  ];
  export type OutputTuple = [
    resourceId: bigint,
    owner: string,
    name: string,
    deletedAt: bigint
  ];
  export interface OutputObject {
    resourceId: bigint;
    owner: string;
    name: string;
    deletedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourceUpdatedEvent {
  export type InputTuple = [
    resourceId: BigNumberish,
    owner: AddressLike,
    newName: string,
    newPrice: BigNumberish,
    newCid: string,
    newUrl: string,
    newServiceId: string,
    newDuration: BigNumberish,
    newUsageLimit: BigNumberish,
    createdAt: BigNumberish,
    updatedAt: BigNumberish,
    newResourceType: BigNumberish
  ];
  export type OutputTuple = [
    resourceId: bigint,
    owner: string,
    newName: string,
    newPrice: bigint,
    newCid: string,
    newUrl: string,
    newServiceId: string,
    newDuration: bigint,
    newUsageLimit: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    newResourceType: bigint
  ];
  export interface OutputObject {
    resourceId: bigint;
    owner: string;
    newName: string;
    newPrice: bigint;
    newCid: string;
    newUrl: string;
    newServiceId: string;
    newDuration: bigint;
    newUsageLimit: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    newResourceType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [seller: AddressLike, amount: BigNumberish];
  export type OutputTuple = [seller: string, amount: bigint];
  export interface OutputObject {
    seller: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessContract extends BaseContract {
  connect(runner?: ContractRunner | null): AccessContract;
  waitForDeployment(): Promise<this>;

  interface: AccessContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchExpireAccess: TypedContractMethod<
    [users: AddressLike[], resourceIdsParam: BigNumberish[], reasons: string[]],
    [bigint],
    "nonpayable"
  >;

  buyAccess: TypedContractMethod<[resourceId: BigNumberish], [void], "payable">;

  buyerAccess: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        expiresAt: bigint;
        usageLimit: bigint;
        amountPaid: bigint;
        purchasedAt: bigint;
        lastExtendedAt: bigint;
      }
    ],
    "view"
  >;

  consumeUsage: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  createResource: TypedContractMethod<
    [
      name: string,
      description: string,
      cid: string,
      url: string,
      serviceId: string,
      price: BigNumberish,
      usageDuration: BigNumberish,
      usageLimit: BigNumberish,
      resourceType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deactivateResource: TypedContractMethod<
    [resourceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteResource: TypedContractMethod<
    [resourceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  editResource: TypedContractMethod<
    [
      resourceId: BigNumberish,
      newName: string,
      newDescription: string,
      newCid: string,
      newUrl: string,
      newServiceId: string,
      newPrice: BigNumberish,
      newUsageDuration: BigNumberish,
      newUsageLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyDeactivateResource: TypedContractMethod<
    [resourceId: BigNumberish],
    [void],
    "nonpayable"
  >;

  expireAccess: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;

  getAllResourceIds: TypedContractMethod<[], [bigint[]], "view">;

  getAllResources: TypedContractMethod<
    [],
    [AccessContract.ResourceStructOutput[]],
    "view"
  >;

  getResource: TypedContractMethod<
    [resourceId: BigNumberish],
    [AccessContract.ResourceStructOutput],
    "view"
  >;

  getResourceTypeString: TypedContractMethod<
    [resourceType: BigNumberish],
    [string],
    "view"
  >;

  getResourcesByType: TypedContractMethod<
    [resourceType: BigNumberish],
    [AccessContract.ResourceStructOutput[]],
    "view"
  >;

  getResourcesCreatedBetween: TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish
    ],
    [[AccessContract.ResourceStructOutput[], bigint] & { totalCount: bigint }],
    "view"
  >;

  getUserAccessCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserAccessHistory: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        purchasedAt: bigint;
        lastExtendedAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;

  getUserAccessibleResources: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  hasAccess: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isResourceDeleted: TypedContractMethod<
    [resourceId: BigNumberish],
    [boolean],
    "view"
  >;

  migrateUserAccess: TypedContractMethod<
    [user: AddressLike, userResourceIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  needsExpiration: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [[boolean, string] & { needsExpiry: boolean; reason: string }],
    "view"
  >;

  nextResourceId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resourceExists: TypedContractMethod<
    [resourceId: BigNumberish],
    [boolean],
    "view"
  >;

  resourceIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  resources: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        name: string;
        description: string;
        cid: string;
        url: string;
        serviceId: string;
        price: bigint;
        usageDuration: bigint;
        usageLimit: bigint;
        isActive: boolean;
        resourceType: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        deactivatedAt: bigint;
        deletedAt: bigint;
      }
    ],
    "view"
  >;

  sellerBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userHasEverPurchased: TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "view"
  >;

  userPurchasedResources: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchExpireAccess"
  ): TypedContractMethod<
    [users: AddressLike[], resourceIdsParam: BigNumberish[], reasons: string[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyAccess"
  ): TypedContractMethod<[resourceId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "buyerAccess"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        expiresAt: bigint;
        usageLimit: bigint;
        amountPaid: bigint;
        purchasedAt: bigint;
        lastExtendedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "consumeUsage"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createResource"
  ): TypedContractMethod<
    [
      name: string,
      description: string,
      cid: string,
      url: string,
      serviceId: string,
      price: BigNumberish,
      usageDuration: BigNumberish,
      usageLimit: BigNumberish,
      resourceType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateResource"
  ): TypedContractMethod<[resourceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteResource"
  ): TypedContractMethod<[resourceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "editResource"
  ): TypedContractMethod<
    [
      resourceId: BigNumberish,
      newName: string,
      newDescription: string,
      newCid: string,
      newUrl: string,
      newServiceId: string,
      newPrice: BigNumberish,
      newUsageDuration: BigNumberish,
      newUsageLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyDeactivateResource"
  ): TypedContractMethod<[resourceId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expireAccess"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish, reason: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllResourceIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllResources"
  ): TypedContractMethod<[], [AccessContract.ResourceStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getResource"
  ): TypedContractMethod<
    [resourceId: BigNumberish],
    [AccessContract.ResourceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResourceTypeString"
  ): TypedContractMethod<[resourceType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getResourcesByType"
  ): TypedContractMethod<
    [resourceType: BigNumberish],
    [AccessContract.ResourceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getResourcesCreatedBetween"
  ): TypedContractMethod<
    [
      startTime: BigNumberish,
      endTime: BigNumberish,
      offset: BigNumberish,
      limit: BigNumberish
    ],
    [[AccessContract.ResourceStructOutput[], bigint] & { totalCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAccessCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAccessHistory"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        purchasedAt: bigint;
        lastExtendedAt: bigint;
        expiresAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAccessibleResources"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasAccess"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isResourceDeleted"
  ): TypedContractMethod<[resourceId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "migrateUserAccess"
  ): TypedContractMethod<
    [user: AddressLike, userResourceIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "needsExpiration"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [[boolean, string] & { needsExpiry: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextResourceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resourceExists"
  ): TypedContractMethod<[resourceId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "resourceIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "resources"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        name: string;
        description: string;
        cid: string;
        url: string;
        serviceId: string;
        price: bigint;
        usageDuration: bigint;
        usageLimit: bigint;
        isActive: boolean;
        resourceType: bigint;
        createdAt: bigint;
        updatedAt: bigint;
        deactivatedAt: bigint;
        deletedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "sellerBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userHasEverPurchased"
  ): TypedContractMethod<
    [user: AddressLike, resourceId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "userPurchasedResources"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AccessExpired"
  ): TypedContractEvent<
    AccessExpiredEvent.InputTuple,
    AccessExpiredEvent.OutputTuple,
    AccessExpiredEvent.OutputObject
  >;
  getEvent(
    key: "AccessPurchased"
  ): TypedContractEvent<
    AccessPurchasedEvent.InputTuple,
    AccessPurchasedEvent.OutputTuple,
    AccessPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ResourceCreated"
  ): TypedContractEvent<
    ResourceCreatedEvent.InputTuple,
    ResourceCreatedEvent.OutputTuple,
    ResourceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceDeactivated"
  ): TypedContractEvent<
    ResourceDeactivatedEvent.InputTuple,
    ResourceDeactivatedEvent.OutputTuple,
    ResourceDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceDeleted"
  ): TypedContractEvent<
    ResourceDeletedEvent.InputTuple,
    ResourceDeletedEvent.OutputTuple,
    ResourceDeletedEvent.OutputObject
  >;
  getEvent(
    key: "ResourceUpdated"
  ): TypedContractEvent<
    ResourceUpdatedEvent.InputTuple,
    ResourceUpdatedEvent.OutputTuple,
    ResourceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "AccessExpired(uint256,address,string,string)": TypedContractEvent<
      AccessExpiredEvent.InputTuple,
      AccessExpiredEvent.OutputTuple,
      AccessExpiredEvent.OutputObject
    >;
    AccessExpired: TypedContractEvent<
      AccessExpiredEvent.InputTuple,
      AccessExpiredEvent.OutputTuple,
      AccessExpiredEvent.OutputObject
    >;

    "AccessPurchased(uint256,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      AccessPurchasedEvent.InputTuple,
      AccessPurchasedEvent.OutputTuple,
      AccessPurchasedEvent.OutputObject
    >;
    AccessPurchased: TypedContractEvent<
      AccessPurchasedEvent.InputTuple,
      AccessPurchasedEvent.OutputTuple,
      AccessPurchasedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ResourceCreated(uint256,address,string,string,string,string,string,uint256,uint256,uint256,uint256,uint8)": TypedContractEvent<
      ResourceCreatedEvent.InputTuple,
      ResourceCreatedEvent.OutputTuple,
      ResourceCreatedEvent.OutputObject
    >;
    ResourceCreated: TypedContractEvent<
      ResourceCreatedEvent.InputTuple,
      ResourceCreatedEvent.OutputTuple,
      ResourceCreatedEvent.OutputObject
    >;

    "ResourceDeactivated(uint256,address,string,uint256)": TypedContractEvent<
      ResourceDeactivatedEvent.InputTuple,
      ResourceDeactivatedEvent.OutputTuple,
      ResourceDeactivatedEvent.OutputObject
    >;
    ResourceDeactivated: TypedContractEvent<
      ResourceDeactivatedEvent.InputTuple,
      ResourceDeactivatedEvent.OutputTuple,
      ResourceDeactivatedEvent.OutputObject
    >;

    "ResourceDeleted(uint256,address,string,uint256)": TypedContractEvent<
      ResourceDeletedEvent.InputTuple,
      ResourceDeletedEvent.OutputTuple,
      ResourceDeletedEvent.OutputObject
    >;
    ResourceDeleted: TypedContractEvent<
      ResourceDeletedEvent.InputTuple,
      ResourceDeletedEvent.OutputTuple,
      ResourceDeletedEvent.OutputObject
    >;

    "ResourceUpdated(uint256,address,string,uint256,string,string,string,uint256,uint256,uint256,uint256,uint8)": TypedContractEvent<
      ResourceUpdatedEvent.InputTuple,
      ResourceUpdatedEvent.OutputTuple,
      ResourceUpdatedEvent.OutputObject
    >;
    ResourceUpdated: TypedContractEvent<
      ResourceUpdatedEvent.InputTuple,
      ResourceUpdatedEvent.OutputTuple,
      ResourceUpdatedEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
