/**
 * Contract type definitions
 * Auto-generated by generate-types.ts
 */

import { ResourceType } from "../constants/contract";

// Contract struct types
export interface Resource {
  owner: string;
  name: string;
  description: string;
  cid: string;
  url: string;
  serviceId: string;
  price: bigint;
  isActive: boolean;
  resourceType: ResourceType;
  createdAt: bigint;
}

export interface Access {
  amountPaid: bigint;
  purchasedAt: bigint;
}

// Event interfaces
export interface AccessPurchasedEvent {
  name: 'AccessPurchased';
  resourceId: bigint;
  buyer: string;
  amountPaid: bigint;
  purchasedAt: bigint;
}

export interface InitializedEvent {
  name: 'Initialized';
  version: bigint;
}

export interface OwnershipTransferredEvent {
  name: 'OwnershipTransferred';
  previousOwner: string;
  newOwner: string;
}

export interface ResourceCreatedEvent {
  name: 'ResourceCreated';
  resourceId: bigint;
  owner: string;
  resourceName: string;
  description: string;
  cid: string;
  url: string;
  serviceId: string;
  price: bigint;
  createdAt: bigint;
  resourceType: bigint;
}

export interface WithdrawalEvent {
  name: 'Withdrawal';
  seller: string;
  amount: bigint;
}

// Union type for all events
export type AccessContractEvent = AccessPurchasedEvent | InitializedEvent | OwnershipTransferredEvent | ResourceCreatedEvent | WithdrawalEvent;

// Generic log type
export interface RawLog {
  topics: string[];
  data: string;
  address?: string;
  blockNumber?: number;
  transactionHash?: string;
  transactionIndex?: number;
  blockHash?: string;
  logIndex?: number;
}
