import * as fs from "fs";
import * as path from "path";
import { Interface } from "@ethersproject/abi";

async function readABI() {
  const abiPath = path.join(process.cwd(), "src", "abi", "AccessContract.json");
  
  if (!fs.existsSync(abiPath)) {
    throw new Error(`ABI not found: ${abiPath}. Run update-from-blockchain.ts first.`);
  }
  
  const abi = JSON.parse(fs.readFileSync(abiPath, "utf8"));
  console.log(`📁 Read ABI with ${abi.length} entries`);
  
  return abi;
}

function generateDecoders(abi: any[]) {
  const iface = new Interface(abi);
  const events = Object.keys(iface.events);
  
  const decoderFunctions = events.map(eventName => {
    const functionName = `decode${eventName}`;
    
    return `export function ${functionName}(log: { topics: string[]; data: string }) {
  try {
    const iface = new Interface(ABI);
    const parsed = iface.parseLog(log);
    
    if (parsed.name !== '${eventName}') {
      throw new Error(\`Expected ${eventName} event, got \${parsed.name}\`);
    }
    
    return {
      name: parsed.name,
      args: parsed.args,
      signature: parsed.signature,
      topic: parsed.topic
    };
  } catch (error: any) {
    throw new Error(\`Failed to decode ${eventName}: \${error.message}\`);
  }
}`;
  }).join('\n\n');
  
  const content = `/**
 * Event decoder functions
 * Auto-generated by generate-decoders.ts
 */

import { Interface } from "@ethersproject/abi";
import ABI from "../abi/AccessContract.json";

// Generic log interface
export interface Log {
  topics: string[];
  data: string;
}

// Generic decoder function
export function decodeEvent(log: Log) {
  const iface = new Interface(ABI);
  return iface.parseLog(log);
}

// Specific event decoders
${decoderFunctions}

// Decode any event and return typed result
export function decodeAccessContractEvent(log: Log) {
  const iface = new Interface(ABI);
  const parsed = iface.parseLog(log);
  
  switch (parsed.name) {
${events.map(eventName => `    case '${eventName}':
      return decode${eventName}(log);`).join('\n')}
    default:
      throw new Error(\`Unknown event: \${parsed.name}\`);
  }
}
`;
  
  return content;
}

async function saveDecoders(content: string) {
  const utilsDir = path.join(process.cwd(), "src", "utils");
  const decodersPath = path.join(utilsDir, "eventDecoding.ts");
  
  if (!fs.existsSync(utilsDir)) {
    fs.mkdirSync(utilsDir, { recursive: true });
    console.log("📁 Created directory:", utilsDir);
  }
  
  fs.writeFileSync(decodersPath, content);
  console.log("💾 Decoders saved to:", decodersPath);
}

async function main() {
  try {
    console.log("🔄 Generating event decoders...");
    
    const abi = await readABI();
    const content = generateDecoders(abi);
    await saveDecoders(content);
    
    console.log("✅ Event decoders generated successfully!");
    console.log("\n🎯 Generated:");
    console.log("  - Generic decodeEvent function");
    console.log("  - Specific decoder for each event");
    console.log("  - Universal decodeAccessContractEvent function");
    
  } catch (error: any) {
    console.error("❌ Generation failed:", error.message);
    process.exitCode = 1;
  }
}

main().catch((error) => {
  console.error("❌ Script failed:", error);
  process.exitCode = 1;
});
